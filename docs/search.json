[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ECODIV 2021",
    "section": "",
    "text": "Preface\nSupervisor: Larmur Annabelle\nThis project is an extension of the research work carried out by the EcoLeg team, with several publications directly related to this subject, presented below:",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#preface",
    "href": "index.html#preface",
    "title": "ECODIV 2021",
    "section": "",
    "text": "Couchoud et al. (2020)\n\n\n\n\n\n\n\nGuide being written\n\n\n\nThis guide is still incomplete. The complete repository (documentation, data, script, etc.) will be available shortly at this link: https://github.com/cmaslard/ECODIV_2021.\n\n\n\n\n\n\n\n\nMore informations about my work :\n\n\n\n\n\n\n\n\n Personal website\n Email\n Github\n Linkedin\n\n\n\n ORCID\n ResearchGate\n Google Scholar\n\n\n\n X (Twitter)\n HAL\n CV",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "ECODIV 2021",
    "section": "Licence",
    "text": "Licence\nThis document is made available under the terms of the Licence Creative Commons Attribution - Non Commercial Use - Share Alike 4.0 International.\n\n\n\n\n\n\n\nCouchoud, M√©gane, Christophe Salon, Sylvie Girodet, Christian Jeudy, Vanessa Vernoud, and Marion Prudent. 2020. ‚ÄúPea Efficiency of Post-Drought Recovery Relies on the Strategy to Fine-Tune Nitrogen Nutrition.‚Äù Frontiers in Plant Science, 5.753, 11 (February): 204. https://doi.org/10.3389/fpls.2020.00204.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "report/germination/analyse_germination.html",
    "href": "report/germination/analyse_germination.html",
    "title": "1¬† Analyse germination ECODIV (2021)",
    "section": "",
    "text": "1.1 Data importation",
    "crumbs": [
      "**üíª Analyse**",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Analyse germination ECODIV (2021)</span>"
    ]
  },
  {
    "objectID": "report/common_function/analysis_function.html",
    "href": "report/common_function/analysis_function.html",
    "title": "2¬† Analysis Function",
    "section": "",
    "text": "2.1 Import microarray ratio_stats\nCode\nimport_ratio_stats_microarray &lt;- function(path_i, path_info_range_i, sheet_i, begin_end_line){\n  \n  # Import info ####\n  column_global_info &lt;- c(\"A\", \"I\")\n  range_global_info = paste0(column_global_info[1],begin_end_line[1],\":\", column_global_info[2],begin_end_line[2])\n  \n  cat(\"Read global info excel sheet (\", range_global_info, \")\\n\")\n  df_info = read_excel(path_i, sheet = sheet_i, range = range_global_info, col_names = T) %&gt;% \n    as.data.frame() %&gt;% \n    dplyr::rename(\n      id_probe=\"N¬∞\",\n      other_description1 =...7,\n      other_description2 =...9) %&gt;% \n    dplyr::select(-...6)\n  \n  # Import the column where the data Rat and  BH were located ####\n  compile_raw_data  &lt;- as.data.frame(matrix(data = NA,nrow = as.numeric(begin_end_line[2]) - as.numeric(begin_end_line[1]) ,ncol = 0)) \n  df_info_range = read_excel(path_info_range_i, col_names = T, sheet = \"for_ratio_stats\")\n  \n  n &lt;- nrow(df_info_range)\n  pb &lt;- progress_bar$new(\n    format = \"[:bar] :percent | Elapsed time  :elapsed | Estimated time :eta\",\n    total = n,\n    clear = FALSE,\n    width = 80\n  )\n  \n  start_time &lt;- Sys.time()\n  \n  df_info_sample_clean_compile &lt;- as.data.frame(matrix(data = NA, nrow = 0, ncol = 13)) \n  colnames(df_info_sample_clean_compile) &lt;-  c(\"date\", \"rep\", \"project_nb\", \"project\", \"sample_type\", \"num_combination\", \"sample_name\", \"color\", \"sample_num\", \"simplify_condition\", \"genotype\", \"sulfur_condition\", \"sample_id\")\n  \n  list_ratio_stats&lt;-list() \n  \n  for (i in 1:n) {\n    column_ratio_stats &lt;- c(df_info_range$logFC[i], df_info_range$BH[i])\n    num_combination &lt;- df_info_range$num_combination[i]\n    \n    begin_end_line_info &lt;- c(\"3\", \"12\")\n    range_info &lt;- paste0(column_ratio_stats[1], begin_end_line_info[1], \":\", column_ratio_stats[2], begin_end_line_info[2])\n    \n    cat(\"Read info of the sample\", range_info, \"\\n\")\n    df_info_sample &lt;- read_excel(path_i, sheet = sheet_i, range = range_info, col_names = FALSE) %&gt;% \n      as.data.frame() %&gt;% \n      dplyr::rename(\n        col1 = ...1,\n        col2 = ...3,\n        col3 = ...2,\n      ) %&gt;% dplyr::select(col1, col2) # to select only ratio and BH\n    \n    df_info_sample_clean &lt;- as.data.frame(matrix(data = NA, nrow = 2, ncol = 12)) \n    colnames(df_info_sample_clean) &lt;- c(\"date\", \"rep\", \"project_nb\", \"project\", \"sample_type\", \"num_combination\", \"sample_name\", #\"color\", \n                                        \"sample_num\", \"simplify_condition\", \"genotype\", \"sulfur_condition\", \"sample_id\")\n    \n    df_info_sample_clean$date &lt;- c(df_info_sample$col1[1], df_info_sample$col2[1])\n    df_info_sample_clean$rep &lt;- c(df_info_sample$col1[2], df_info_sample$col2[2])\n    df_info_sample_clean$project_nb &lt;- c(df_info_sample$col1[5], df_info_sample$col2[5])\n    df_info_sample_clean$project &lt;- c(df_info_sample$col1[6], df_info_sample$col2[6])\n    df_info_sample_clean$num_combination &lt;- num_combination\n    df_info_sample_clean$sample_type &lt;- c(df_info_sample$col1[7], df_info_sample$col2[7])\n    df_info_sample_clean$sample_name &lt;- c(df_info_sample$col1[8], df_info_sample$col2[9])\n    #df_info_sample_clean$color &lt;- c(df_info_sample$col1[10], df_info_sample$col2[10])\n    \n    df_info_sample_clean &lt;- df_info_sample_clean %&gt;%\n      dplyr::mutate(\n        sample_num =  str_extract(sample_name, \"^[0-9_.]+\"),\n        sample_num = str_replace_all(sample_num, c(\"\\\\_\" = \"\\\\.\")), \n        simplify_condition = str_extract(sample_name, \"WT[+-]|Mut[+-]\"),\n        simplify_condition = str_replace_all(simplify_condition, c(\"\\\\+\" = \"_SS\", \"\\\\-\" = \"_SD\")),\n        sulfur_condition = str_sub(simplify_condition, -2, -1),\n        genotype = ifelse(sample_num %in% c(1.1, 2.2, 3.3, 4.4, 17.1, 18.2, 19.3, 20.4), \"WT2\", sample_num),# Add genotype\n        genotype = ifelse(sample_num %in% c(5.1, 6.2, 7.3, 8.4, 21.1, 22.2, 23.3, 24.4), \"E568K\", genotype),# Add genotype\n        genotype = ifelse(sample_num %in% c(9.5, 10.6, 11.7, 12.8, 25.5, 26.6, 27.7, 28.8), \"WT1\", genotype),# Add genotype\n        genotype = ifelse(sample_num %in% c(13.5, 14.6, 15.7, 16.8, 29.5, 30.6, 31.7, 32.8), \"W78*\", genotype),# Add genotype\n        sample_id = paste(sep = \"_\", simplify_condition, genotype, #sample_num, \n                          rep, #color, \n                          num_combination)\n      ) %&gt;% dplyr::select(-c(\"sample_name\", \"sample_num\"))\n    \n    range_ratio_stats &lt;- paste0(column_ratio_stats[1], begin_end_line[1], \":\", column_ratio_stats[2], begin_end_line[2])\n    \n    # Importer les donn√©es rouges/vertes pour les deux √©chantillons\n    cat(\"Read ratio and stats data range \",range_ratio_stats, \" \\n\")\n    df_x &lt;- read_excel(path_i, sheet = sheet_i, range = range_ratio_stats, col_names = TRUE) %&gt;% as.data.frame() ; colnames(df_x) &lt;- c(\"logFC\", \"Bonferroni\", \"BH\")\n    \n    df_x &lt;- cbind(df_info, df_x)\n    \n    list_ratio_stats[[paste(df_info_sample_clean$sample_id[1], \"vs\", df_info_sample_clean$sample_id[2])]] &lt;- df_x\n    \n    df_info_sample_clean_compile = rbind(df_info_sample_clean_compile, df_info_sample_clean)\n    \n    pb$tick()\n    elapsed_time &lt;- Sys.time() - start_time\n  }\n  \n  global_df &lt;- cbind(df_info , compile_raw_data)\n  return(list(\n    list_ratio_stats = list_ratio_stats,\n    df_info_sample_clean_compile = df_info_sample_clean_compile\n  ))\n}",
    "crumbs": [
      "**üõ†Ô∏èÔ∏è Common functions**",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Analysis Function</span>"
    ]
  },
  {
    "objectID": "report/common_function/analysis_function.html#import-microarray-raw_data-red-green",
    "href": "report/common_function/analysis_function.html#import-microarray-raw_data-red-green",
    "title": "2¬† Analysis Function",
    "section": "2.2 Import microarray raw_data (Red / Green)",
    "text": "2.2 Import microarray raw_data (Red / Green)\n\n\nCode\n# Function that import all data (take a lot of time)\nimport_raw_data_microarray &lt;- function(path_i, path_info_range_i, sheet_i, begin_end_line){\n  \n  # Import info ####\n  column_global_info &lt;- c(\"A\", \"I\")\n  range_global_info = paste0(column_global_info[1],begin_end_line[1],\":\", column_global_info[2],begin_end_line[2])\n  \n  cat(\"Read global info excel sheet (\", range_global_info, \")\\n\")\n  df_info = read_excel(path_i, sheet = sheet_i, range = range_global_info, col_names = T) %&gt;% \n    as.data.frame() %&gt;% \n    dplyr::rename(\n      id_probe=\"N¬∞\",\n      other_description1 =...7,\n      other_description2 =...9) %&gt;% \n    dplyr::select(-...6)\n  \n  # import the column where the data is located ####\n  compile_raw_data  &lt;- as.data.frame(matrix(data = NA,nrow = as.numeric(begin_end_line[2]) - as.numeric(begin_end_line[1]) ,ncol = 0)) \n  df_info_range = read_excel(path_info_range_i, col_names = T)\n  \n  n &lt;- nrow(df_info_range)\n  pb &lt;- progress_bar$new(\n    format = \"[:bar] :percent | Elapsed time  :elapsed | Estimated time :eta\",\n    total = n,\n    clear = FALSE,\n    width = 80\n  )\n  \n  start_time &lt;- Sys.time()\n  \n  df_info_sample_clean_compile &lt;- as.data.frame(matrix(data = NA, nrow = 0, ncol = 13)) \n  colnames(df_info_sample_clean_compile) &lt;-  c(\"date\", \"rep\", \"project_nb\", \"project\", \"sample_type\", \"num_combination\", \"sample_name\", \"color\", \"sample_num\", \"simplify_condition\", \"genotype\", \"sulfur_condition\", \"sample_id\")\n  \n  for (i in 1:n) {\n    column_red_green &lt;- c(df_info_range$red_column[i], df_info_range$green_column[i])\n    num_combination &lt;- df_info_range$num_combination[i]\n    \n    begin_end_line_info &lt;- c(\"3\", \"12\")\n    range_info &lt;- paste0(column_red_green[1], begin_end_line_info[1], \":\", column_red_green[2], begin_end_line_info[2])\n    \n    cat(\"Read info of the sample\", range_info, \"\\n\")\n    df_info_sample &lt;- read_excel(path_i, sheet = sheet_i, range = range_info, col_names = FALSE) %&gt;% \n      as.data.frame() %&gt;% \n      dplyr::rename(\n        col1 = ...1,\n        col2 = ...2\n      )\n    \n    df_info_sample_clean &lt;- as.data.frame(matrix(data = NA, nrow = 2, ncol = 13)) \n    colnames(df_info_sample_clean) &lt;- c(\"date\", \"rep\", \"project_nb\", \"project\", \"sample_type\", \"num_combination\", \"sample_name\", \"color\", \"sample_num\", \"simplify_condition\", \"genotype\", \"sulfur_condition\", \"sample_id\")\n    \n    df_info_sample_clean$date &lt;- c(df_info_sample$col1[1], df_info_sample$col2[1])\n    df_info_sample_clean$rep &lt;- c(df_info_sample$col1[2], df_info_sample$col2[2])\n    df_info_sample_clean$project_nb &lt;- c(df_info_sample$col1[5], df_info_sample$col2[5])\n    df_info_sample_clean$project &lt;- c(df_info_sample$col1[6], df_info_sample$col2[6])\n    df_info_sample_clean$num_combination &lt;- num_combination\n    df_info_sample_clean$sample_type &lt;- c(df_info_sample$col1[7], df_info_sample$col2[7])\n    df_info_sample_clean$sample_name &lt;- c(df_info_sample$col1[8], df_info_sample$col2[9])\n    df_info_sample_clean$color &lt;- c(df_info_sample$col1[10], df_info_sample$col2[10])\n    \n    df_info_sample_clean &lt;- df_info_sample_clean %&gt;%\n      dplyr::mutate(\n        sample_num =  str_extract(sample_name, \"^[0-9_.]+\"),\n        sample_num = str_replace_all(sample_num, c(\"\\\\_\" = \"\\\\.\")), \n        simplify_condition = str_extract(sample_name, \"WT[+-]|Mut[+-]\"),\n        simplify_condition = str_replace_all(simplify_condition, c(\"\\\\+\" = \"_SS\", \"\\\\-\" = \"_SD\")),\n        sulfur_condition = str_sub(simplify_condition, -2, -1),\n        genotype = ifelse(sample_num %in% c(1.1, 2.2, 3.3, 4.4, 17.1, 18.2, 19.3, 20.4), \"WT2\", sample_num),# Add genotype\n        genotype = ifelse(sample_num %in% c(5.1, 6.2, 7.3, 8.4, 21.1, 22.2, 23.3, 24.4), \"E568K\", genotype),# Add genotype\n        genotype = ifelse(sample_num %in% c(9.5, 10.6, 11.7, 12.8, 25.5, 26.6, 27.7, 28.8), \"WT1\", genotype),# Add genotype\n        genotype = ifelse(sample_num %in% c(13.5, 14.6, 15.7, 16.8, 29.5, 30.6, 31.7, 32.8), \"W78*\", genotype),# Add genotype\n        sample_id = paste(sep = \"_\", simplify_condition, sample_num, rep, color, num_combination)\n      )\n    \n    range_i &lt;- paste0(column_red_green[1], begin_end_line[1], \":\", column_red_green[2], begin_end_line[2])\n    \n    # Importer les donn√©es rouges/vertes pour les deux √©chantillons\n    cat(\"Read raw data range \",range_i, \" \\n\")\n    df_x &lt;- read_excel(path_i, sheet = sheet_i, range = range_i, col_names = TRUE) %&gt;% as.data.frame()\n    \n    # V√©rification des noms de colonnes\n    if (colnames(df_x)[1] != \"Red\" & colnames(df_x)[2] != \"Green\" & length(colnames(df_x))!=2) {\n      stop(\"Column name needs to be Red or Green\")\n    }\n    \n    colnames(df_x)[1] = df_info_sample_clean$sample_id[1]\n    colnames(df_x)[2] = df_info_sample_clean$sample_id[2]\n    \n    compile_raw_data = cbind(compile_raw_data, df_x)\n    df_info_sample_clean_compile = rbind(df_info_sample_clean_compile, df_info_sample_clean)\n    \n    pb$tick()\n    elapsed_time &lt;- Sys.time() - start_time\n  }\n  \n  global_df &lt;- cbind(df_info , compile_raw_data)\n  return(list(\n    global_df = global_df,\n    df_info_sample_clean_compile = df_info_sample_clean_compile\n  ))\n}",
    "crumbs": [
      "**üõ†Ô∏èÔ∏è Common functions**",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Analysis Function</span>"
    ]
  },
  {
    "objectID": "report/common_function/visualization_function.html",
    "href": "report/common_function/visualization_function.html",
    "title": "3¬† Visualization function",
    "section": "",
    "text": "3.1 Visualisation of the density of the intensity in log2 for red and green channel\nCode\nplot_rg_density &lt;- function(data_list, normalized = F) {\n  \n  if(normalized == T){\n    # Convert to Red and Green matrices\n    ID &lt;- data_list[[\"genes\"]][[1]]\n    A &lt;- data_list$A  # Average log intensity\n    M &lt;- data_list$M  # Log ratio\n    \n    R &lt;- 2^(A + (M / 2))  # Calculate Red intensities\n    G &lt;- 2^(A - (M / 2))  # Calculate Green intensities\n    \n    rownames(R) &lt;- ID\n    rownames(G) &lt;- ID\n    # Convert into matrices\n    R_matrix &lt;- as.matrix(R)\n    G_matrix &lt;- as.matrix(G)\n    \n    # Combine into a list for the function\n    data_list &lt;- list(R = R_matrix, G = G_matrix)\n  }\n  \n  # Load required libraries\n  # 1) Extract R and G matrices from the input list.\n  #    Each row = gene, each column = sample.\n  Rmat &lt;- data_list$R\n  Gmat &lt;- data_list$G\n  \n  # Make sure column names exist (these will be your sample IDs).\n  if (is.null(colnames(Rmat))) {\n    stop(\"Matrix R does not have column names (sample IDs).\")\n  }\n  if (is.null(colnames(Gmat))) {\n    stop(\"Matrix G does not have column names (sample IDs).\")\n  }\n  \n  # 2) Convert each matrix to a data frame, including the row names as a 'Gene' column\n  dfR &lt;- as.data.frame(Rmat)\n  dfR$genes &lt;- rownames(Rmat)\n  # Pivot to a long format (key = Sample, value = Intensity)\n  dfR_long &lt;- gather(dfR, key = \"Sample\", value = \"Intensity\", -genes)\n  dfR_long$Channel &lt;- \"Red\"\n  \n  dfG &lt;- as.data.frame(Gmat)\n  dfG$genes &lt;- rownames(Gmat)\n  # Pivot to a long format\n  dfG_long &lt;- gather(dfG, key = \"Sample\", value = \"Intensity\", -genes)\n  dfG_long$Channel &lt;- \"Green\"\n  \n  # 3) Combine both long data frames\n  df_all &lt;- rbind(dfR_long, dfG_long)\n  \n  # 4) Create the density plot\n  #    - We facet by Sample so that each sample has its own panel\n  #    - We use color/fill to distinguish Red vs Green\n  p &lt;- ggplot(df_all, aes(x = log2(Intensity), color = Channel, group = interaction(Sample, Channel))) +\n    geom_density(linewidth = .3) +\n    scale_color_manual(values = c(\"Red\" = \"red\", \"Green\" = \"green\")) +\n    labs(\n      x = expression(log[2](Intensity)),\n      y = \"Density\"\n    ) +\n    theme_minimal()+\n    theme(\n      panel.grid = element_blank() # Remove all grid lines\n    )\n  \n  return(p)\n}",
    "crumbs": [
      "**üõ†Ô∏èÔ∏è Common functions**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Visualization function</span>"
    ]
  },
  {
    "objectID": "report/common_function/visualization_function.html#visualisation-of-vulcanopplot-for-the-ratio-stats",
    "href": "report/common_function/visualization_function.html#visualisation-of-vulcanopplot-for-the-ratio-stats",
    "title": "3¬† Visualization function",
    "section": "3.2 Visualisation of vulcanopplot for the ratio stats",
    "text": "3.2 Visualisation of vulcanopplot for the ratio stats\n\n\nCode\n## Process your data and add flags for coloring\n# comparison &lt;- \"Mut_SD_E568K_RepBio_1 vs WT_SD_WT2_RepBio_1\"\n\nvulcanoplot_microarray_ratio_stats&lt;- function(comparison, adg.p.Val_i = 0.05, logFC_i = 1, interactive = F){\n  comparison_title = paste0(gsub(\"_RepBio_\\\\d+\", \"\", comparison), \" (FDR:\", adg.p.Val_i, \" ; logFC:\",logFC_i,\")\")\n  \n  results &lt;- list_ratio_stats[[comparison]] %&gt;%\n    dplyr::rename(adj.P.Val = BH, \n                  ID = id_probe) %&gt;% \n    mutate(adj.P.Val = ifelse(adj.P.Val == 0, 0.00000000000001,adj.P.Val)) %&gt;% \n    mutate(\n      isSignificant = (adj.P.Val &lt; 0.05) & (abs(logFC) &gt; logFC_i),                         # Flag for significance\n      \n      colorCategory = case_when(\n        ID %in% c(\"PsCam042688\", \"PsCam042745\") ~ \"Highlighted\",                     # Highlighted point\n        !isSignificant ~ \"Not significant\",                      # Non-significant points\n        logFC &lt; -abs(logFC_i) ~ \"Negative\",                                  # Negative fold change\n        logFC &gt; abs(logFC_i) ~ \"Positive\"                                   # Positive fold change\n      )\n    ) %&gt;%\n    arrange(adj.P.Val)\n  \n  sum(results$isSignificant)\n  \n  # Title for the plot\n  \n  # ggplot for static rendering\n  p1 &lt;- ggplot(results, aes(x = logFC, y = -log10(adj.P.Val), color = colorCategory)) +\n    geom_point(size = 1, alpha = .6) +                                     # Adjust point size\n    geom_text_repel(\n      data = subset(results, colorCategory == \"Highlighted\"),    # Label only the highlighted point\n      aes(label = sub(\"^symbols:\", \"\", CAT)),\n      color = sulfate_pallet[2],                                           # Label in green\n      size = 3,\n      max.overlaps = 10\n    ) +\n    scale_color_manual(\n      values = c(\n        \"Not significant\" = \"gray50\",                            # Black for non-significant points\n        \"Negative\" = \"#6697EA\",                                    # Blue for negative fold change\n        \"Positive\" = \"#B02428\",                                     # Red for positive fold change\n        \"Highlighted\" = as.character(sulfate_pallet[2])                                 # Green for highlighted point\n      )\n    ) +\n    theme_minimal() +\n    labs(\n      title = comparison_title,\n      x = expression(log[2]~Fold~Change),\n      y = expression(-log[10](adj.P.Val))\n    )\n  \n  # ggplot for interactive rendering with ggplotly\n  p1_interactive &lt;- ggplot(results, aes(x = logFC, y = -log10(adj.P.Val), color = colorCategory)) +\n    geom_point(aes(text = paste(\"ID:\", ID, \"&lt;br&gt;CAT:\", CAT, \"&lt;br&gt;logFC:\", logFC, \"&lt;br&gt;P.Value:\", adj.P.Val)), size = 1, alpha = .6) +\n    scale_color_manual(\n      values = c(\n        \"Not significant\" = \"gray50\",                            # Black for non-significant points\n        \"Negative\" = \"#6697EA\",                                    # Blue for negative fold change\n        \"Positive\" = \"#B02428\",                                     # Red for positive fold change\n        \"Highlighted\" = as.character(sulfate_pallet[2])                                 # Green for highlighted point\n      )\n    ) +\n    theme_minimal() +\n    labs(\n      title = comparison_title,\n      x = \"log2 Fold Change\",  # Replace expression with plain text\n      y = \"-log10(p-value)\"\n    )\n  if(interactive){\n    # Convert to interactive plot\n    return(ggplotly(p1_interactive, tooltip = \"text\"))\n  }else{\n    return(p1_interactive)\n  }\n}\n# names(list_ratio_stats)",
    "crumbs": [
      "**üõ†Ô∏èÔ∏è Common functions**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Visualization function</span>"
    ]
  },
  {
    "objectID": "report/common_function/visualization_function.html#visualisation-of-vulcanopplot-when-i-select-different-condition",
    "href": "report/common_function/visualization_function.html#visualisation-of-vulcanopplot-when-i-select-different-condition",
    "title": "3¬† Visualization function",
    "section": "3.3 Visualisation of vulcanopplot when i select different condition",
    "text": "3.3 Visualisation of vulcanopplot when i select different condition\n\n\nCode\nvulcanoplot_microarray_selection&lt;- function(diff_by = \"condition\", levels_comparison_1, levels_comparison_2, logFC_i = 0){\n  load(file =here::here(\"data/microarray/output/normalized_data_microarray_leaf_PeaSulf.RData\"))\n  \n  df_info_sample_clean_compile &lt;- read_csv(here::here(\"data/microarray/output/list_microarray_microarray_leaf_PeaSulf.csv\"), show_col_types = FALSE) %&gt;% \n    mutate(sample_id_simplify = paste(sep = \"_\", simplify_condition, genotype, num_combination), \n           condition = paste(sep = \"_\", simplify_condition, genotype)) %&gt;% \n    dplyr::select(sample_id, condition, sulfur_condition, genotype) %&gt;% \n    mutate(\n      splitted = str_split_fixed(sample_id, \"_\", 6)\n    ) %&gt;%\n    mutate(\n      genotype_simplify = splitted[,1]\n    ) %&gt;%\n    dplyr::select(-splitted) %&gt;% \n    mutate(across(c(condition, genotype, sulfur_condition,genotype_simplify), as.factor)) %&gt;% \n    mutate(condition = fct_relevel(condition, \"WT_SS_WT1\", \"WT_SD_WT1\", \"Mut_SS_W78*\", \"Mut_SD_W78*\",\n                                   \"WT_SS_WT2\", \"WT_SD_WT2\", \"Mut_SS_E568K\", \"Mut_SD_E568K\"),\n           genotype = fct_relevel(genotype, \"WT1\", \"W78*\", \"WT2\", \"E568K\"), \n           sulfur_condition = fct_relevel(sulfur_condition, \"SS\", \"SD\"),\n           genotype_simplify = fct_relevel(genotype_simplify, \"WT\", \"Mut\")\n    )\n  if (!diff_by %in% c(\"sulfur_condition\", \"condition\", \"genotype\", \"genotype_simplify\")) {\n    stop(\"Invalid value for 'diff'. It must be one of 'sulfur_condition', 'condition', 'genotype' or 'genotype_simplify'.\")\n  }\n  \n  if(diff_by ==\"sulfur_condition\"){\n    df_to_select_s &lt;- df_info_sample_clean_compile %&gt;% \n      filter(sulfur_condition %in% c(levels_comparison_1, levels_comparison_2))\n  }else if(diff_by == \"condition\"){\n    df_to_select_s &lt;- df_info_sample_clean_compile %&gt;% \n      filter(condition %in% c(levels_comparison_1, levels_comparison_2))\n  }else if(diff_by == \"genotype\"){\n    df_to_select_s &lt;- df_info_sample_clean_compile %&gt;% \n      filter(genotype %in% c(levels_comparison_1, levels_comparison_2))\n  }else if(diff_by == \"genotype_simplify\"){\n    df_to_select_s &lt;- df_info_sample_clean_compile %&gt;% \n      filter(genotype_simplify %in% c(levels_comparison_1, levels_comparison_2)) %&gt;% \n      filter(!sample_id %in% c(\"WT_SD_1.1_Rep1_Red_17\", \"WT_SS_17.1_Rep1_Green_17\", \"WT_SD_4.4_Rep2_Red_18\", \"WT_SS_19.3_Rep2_Green_18\", \"WT_SD_9.5_Rep3_Red_19\", \"WT_SS_25.5_Rep3_Green_19\", \"WT_SD_12.8_Rep4_Red_20\", \"WT_SS_28.8_Rep4_Green_20\"))\n  }\n  \n  levels_comparison = c(levels_comparison_1, levels_comparison_2)\n  \n  RG.pAq = RG.MA(MA.pAq)\n  colnames(RG.pAq$G)&lt;- colnames(RG$G)\n  \n  RG_all &lt;- cbind(RG.pAq$R, RG.pAq$G)\n  \n  RG.pAq_sub = RG.pAq\n  \n  if(diff_by ==\"sulfur_condition\"){\n    RG.pAq_sub$R &lt;- RG_all[, df_to_select_s %&gt;% filter(sulfur_condition == levels_comparison[1]) %&gt;% pull(sample_id), drop = FALSE]\n    RG.pAq_sub$G &lt;- RG_all[, df_to_select_s %&gt;% filter(sulfur_condition == levels_comparison[2]) %&gt;% pull(sample_id), drop = FALSE]\n  }else if(diff_by == \"condition\"){\n    RG.pAq_sub$R &lt;- RG_all[, df_to_select_s %&gt;% filter(condition == levels_comparison[1]) %&gt;% pull(sample_id), drop = FALSE]\n    RG.pAq_sub$G &lt;- RG_all[, df_to_select_s %&gt;% filter(condition == levels_comparison[2]) %&gt;% pull(sample_id), drop = FALSE]\n  }else if(diff_by == \"genotype\"){\n    RG.pAq_sub$R &lt;- RG_all[, df_to_select_s %&gt;% filter(genotype == levels_comparison[1]) %&gt;% pull(sample_id), drop = FALSE]\n    RG.pAq_sub$G &lt;- RG_all[, df_to_select_s %&gt;% filter(genotype == levels_comparison[2]) %&gt;% pull(sample_id), drop = FALSE]\n  }else if(diff_by == \"genotype_simplify\"){\n    RG.pAq_sub$R &lt;- RG_all[, df_to_select_s %&gt;% filter(genotype_simplify == levels_comparison[1]) %&gt;% pull(sample_id), drop = FALSE]\n    RG.pAq_sub$G &lt;- RG_all[, df_to_select_s %&gt;% filter(genotype_simplify == levels_comparison[2]) %&gt;% pull(sample_id), drop = FALSE]\n  }\n  \n  \n  MA.pAq_sub &lt;- MA.RG(RG.pAq_sub)\n  \n  design &lt;- matrix(1, nrow = length(colnames(MA.pAq_sub$M)), ncol = 1)\n  \n  colnames(design) &lt;- \"Intercept\"\n  \n  # Fit the linear model\n  fit &lt;- lmFit(MA.pAq_sub, design)\n  \n  # Apply empirical Bayes moderation\n  fit.eb &lt;- eBayes(fit)\n  \n  results &lt;- topTable(fit.eb, coef = \"Intercept\", number = Inf, adjust.method = \"BH\") %&gt;%\n    mutate(\n      isSignificant = (adj.P.Val &lt; 0.05) & (abs(logFC) &gt; logFC_i),                         # Flag for significance\n      \n      colorCategory = case_when(\n        ID %in% c(\"PsCam042688\", \"PsCam042745\") ~ \"Highlighted\",                     # Highlighted point\n        !isSignificant ~ \"Not significant\",                      # Non-significant points\n        logFC &lt; -abs(logFC_i) ~ \"Negative\",                                  # Negative fold change\n        logFC &gt; abs(logFC_i) ~ \"Positive\"                                   # Positive fold change\n      )\n    ) %&gt;%\n    arrange(adj.P.Val) %&gt;%\n    arrange(adj.P.Val) %&gt;%\n    left_join(\n      .,\n      read_csv(here::here(\"data/microarray/output/raw_data_microarray_leaf_PeaSulf.csv\"), show_col_types = FALSE) %&gt;%\n        as.data.frame() %&gt;%\n        dplyr::select(c(\"id_probe\", \"CAT\")) %&gt;%\n        dplyr::rename(ID = id_probe),\n      by = \"ID\"\n    )\n  \n  n_gene_significant &lt;- sum(results$isSignificant)\n  n_gene_significant_up &lt;-sum(results$isSignificant & results$colorCategory ==\"Positive\")\n  n_gene_significant_down &lt;-sum(results$isSignificant & results$colorCategory ==\"Negative\")\n  n_gene_significant\n  n_gene_significant_up\n  n_gene_significant_down\n  \n  # Title for the plot\n  title_i &lt;- paste0(levels_comparison[1], \" vs \", levels_comparison[2],\" (Normalized)\", \"(FDR:0.05;logFC:\", logFC_i, \")\\n\", n_gene_significant,\" genes significant (\",n_gene_significant_up,\" Up;\",n_gene_significant_down,\" Down)\" )\n  \n  # ggplot for static rendering\n  p1 &lt;- ggplot(results, aes(x = logFC, y = -log10(P.Value), color = colorCategory)) +\n    geom_point(size = 1, alpha = .6) +                                     # Adjust point size\n    geom_text_repel(\n      data = subset(results, colorCategory == \"Highlighted\"),    # Label only the highlighted point\n      aes(label = sub(\"^symbols:\", \"\", CAT)),\n      color = sulfate_pallet[2],                                           # Label in green\n      size = 3,\n      max.overlaps = 10\n    ) +\n    scale_color_manual(\n      values = c(\n        \"Not significant\" = \"gray50\",                            # Black for non-significant points\n        \"Negative\" = \"#6697EA\",                                    # Blue for negative fold change\n        \"Positive\" = \"#B02428\",                                     # Red for positive fold change\n        \"Highlighted\" = as.character(sulfate_pallet[2])                                 # Green for highlighted point\n      )\n    ) +\n    theme_minimal() +\n    labs(\n      title = title_i,\n      x = expression(log[2]~Fold~Change),\n      y = expression(-log[10](p-value))\n    )\n  \n  # ggplot for interactive rendering with ggplotly\n  p1_interactive &lt;- ggplot(results, aes(x = logFC, y = -log10(P.Value), color = colorCategory)) +\n    geom_point(aes(text = paste(\"ID:\", ID, \"&lt;br&gt;CAT:\", CAT, \"&lt;br&gt;logFC:\", logFC, \"&lt;br&gt;P.Value:\", P.Value)), size = 1, alpha = .6) +\n    scale_color_manual(\n      values = c(\n        \"Not significant\" = \"gray50\",                            # Black for non-significant points\n        \"Negative\" = \"#6697EA\",                                    # Blue for negative fold change\n        \"Positive\" = \"#B02428\",                                     # Red for positive fold change\n        \"Highlighted\" = as.character(sulfate_pallet[2])                                 # Green for highlighted point\n      )\n    ) +\n    theme_minimal() +\n    labs(\n      title = title_i,\n      x = \"log2 Fold Change\",  # Replace expression with plain text\n      y = \"-log10(p-value)\"\n    )\n  return(p1_interactive)\n}",
    "crumbs": [
      "**üõ†Ô∏èÔ∏è Common functions**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Visualization function</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Couchoud, M√©gane, Christophe Salon, Sylvie Girodet, Christian Jeudy,\nVanessa Vernoud, and Marion Prudent. 2020. ‚ÄúPea Efficiency of\nPost-Drought Recovery Relies on the Strategy to Fine-Tune Nitrogen\nNutrition.‚Äù Frontiers in Plant Science, 5.753, 11\n(February): 204. https://doi.org/10.3389/fpls.2020.00204.",
    "crumbs": [
      "References"
    ]
  }
]